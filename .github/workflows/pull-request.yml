name: Pull Request Checks

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    environment: test
    needs: [lint]
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      NODE_ENV: test
    steps:
      - uses: actions/checkout@v4
      - name: Debug Environment Variables
        run: |
          echo "=== Environment Variable Status ==="
          echo "SUPABASE_URL is set: $([[ -n "$SUPABASE_URL" ]] && echo 'yes' || echo 'no')"
          echo "SUPABASE_ANON_KEY is set: $([[ -n "$SUPABASE_ANON_KEY" ]] && echo 'yes' || echo 'no')"
          echo "OPENROUTER_API_KEY is set: $([[ -n "$OPENROUTER_API_KEY" ]] && echo 'yes' || echo 'no')"
          echo "TEST_USER_EMAIL is set: $([[ -n "$TEST_USER_EMAIL" ]] && echo 'yes' || echo 'no')"
          echo "TEST_USER_PASSWORD is set: $([[ -n "$TEST_USER_PASSWORD" ]] && echo 'yes' || echo 'no')"
          echo "NODE_ENV is: $NODE_ENV"
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Build application
        run: npm run build
      - name: Start application
        run: |
          echo "Starting application with environment variables..."
          env | sort
          DEBUG=* ASTRO_LOG_LEVEL=debug npm run preview 2>&1 | tee server-output.log &
          echo $! > server.pid
      - name: Wait for app to be ready
        run: |
          echo "Waiting for app to be ready..."
          timeout=60
          while ! curl -v http://localhost:3000 2>&1; do
            if [ $timeout -le 0 ]; then
              echo "=== Server failed to start ==="
              echo "=== Last 50 lines of server output ==="
              tail -n 50 server-output.log
              echo "=== Process Status ==="
              ps aux | grep node
              echo "=== Port Status ==="
              netstat -tulpn | grep 3000 || true
              exit 1
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout - 2))
          done
          echo "=== Testing test-page endpoint ==="
          curl -v http://localhost:3000/test-page 2>&1 | tee test-page-response.log
          echo "=== Recent server output ==="
          tail -n 50 server-output.log
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DEBUG: pw:api*
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            debug-*.png
            test-results/
            playwright-report/
            server-output.log
            test-page-response.log
            npm-debug.log*

  status-comment:
    needs: [e2e-test, unit-test]
    name: PR Status Comment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
        
      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            
            const statusComment = `## Pull Request Check Results ðŸŽ¯
            
            ### Test Coverage Summary
            - E2E Tests: Completed âœ…
            
            ### Detailed Results
            - E2E Tests: âœ… Passed
            
            [View detailed Playwright report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: statusComment
            });