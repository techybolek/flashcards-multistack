/*
 * This file contains DTO and Command Model definitions shared with the backend.
 * It ensures strong type safety and clear separation between data transfer objects and command models.
 */

// Command model for user login request
export interface LoginUserCommand {
  email: string;
  password: string;
}

// Command model for user registration request
export interface RegisterUserCommand {
  email: string;
  password: string;
  confirmPassword: string;
  name?: string;
}

// Command model for password recovery request
export interface RecoverPasswordCommand {
  email: string;
}

// DTO for user login response
export interface LoginUserResponseDTO {
  token: string;
  user: {
    id: string; // UUID representing the user's ID
    email: string;
  };
}

// Represents a flashcard as returned by the API, based on the flashcards table in the database.
export interface FlashcardDTO {
  id: number;
  front: string;
  back: string;
  source: 'manual' | 'ai-full' | 'ai-edited';
  created_at: string;
  updated_at: string;
  generation_id?: number | null; // Optional field for AI generated flashcards
  display_order: number;
}

// Command model for creating a flashcard. Used in both single and bulk flashcard creation.
export interface CreateFlashcardCommand {
  front: string;
  back: string;
  source: 'manual' | 'ai-full' | 'ai-edited';
  generation_id?: number | null; // For AI generated flashcards, this field is populated; manual flashcards may leave it null.
  display_order: number;
}

// Command model for updating a flashcard. Note: Only 'manual' or 'ai-edited' sources are allowed for updates.
export interface UpdateFlashcardCommand {
  front: string;
  back: string;
  source: 'manual' | 'ai-edited';
}

// Pagination structure used in list endpoints.
export interface PaginationDTO {
  total: number;
  page: number;
  limit: number;
  pages: number;
}

// DTO for listing flashcards, includes an array of FlashcardDTO and pagination information.
export interface ListFlashcardsResponseDTO {
  data: FlashcardDTO[];
  pagination: PaginationDTO;
}

// Represents a flashcard proposal generated by the AI, always with source 'ai-full'.
export interface FlashcardProposalDTO {
  front: string;
  back: string;
  source: 'ai-full';
}

// Statistics provided after flashcard generation.
export interface GenerationStatsDTO {
  generated_count: number;
  generation_duration: string; // Duration in ISO 8601 format, e.g., 'PT2S'
}

// DTO for the result of flashcard generation, including proposals and generation statistics.
export interface GenerationResultDTO {
  generation_id: number;
  generation_name: string;
  flashcardProposals: FlashcardProposalDTO[];
  stats: GenerationStatsDTO;
}

// Command model for generating flashcards from a block of text. Expects text between 1000 and 10000 characters.
export interface GenerateFlashcardsCommand {
  text: string;
}

export interface Generation {
  id: string;
  userId: string;
  createdAt: string;
  // Add other relevant fields later as needed
}

export interface GenerationResponse {
  generations: Generation[];
}

export interface User {
  id: string;
  email: string;
  name: string;
}

// API Response types
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

// Error types
export interface ApiError {
  message: string;
  code?: string;
  details?: any;
}